<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

    <title>Laboratorio lezione</title>
    <link rel="shortcut icon" href="./favicon.ico"/>
    <link rel="stylesheet" href="./dist/reveal.css" />
    <link rel="stylesheet" href="./dist/theme/solarized.css" id="theme" />
    <link rel="stylesheet" href="./css/highlight/tomorrow-night-bright.css" />

  </head>
  <body>
    <div class="reveal">
      <div class="slides"><section  data-markdown><script type="text/template">

## Piano delle lezioni


https://politecnicomilano.webex.com/meet/pierluigi.checchi

ven 14.15 - 17.15 aula De Donato (campus Leonardo)

- 29 settembre (prima lezione introduttiva)
- 06 ottobre (C base)
- 27 ottobre (Costruttori) 
- <mark> 01 dicembre (Costruttori e funzioni)</mark>
- 15 dicembre (Liste)
</script></section><section  data-markdown><script type="text/template">


## Argomenti della lezione 4 di 5

- introduzione al laboratorio 
- debugging della prova di esame della volta scorsa
- 2 esercizi svolti dai tutor (eser.2, eser.3) su 7
- 1 esercizio spiegato velocemente con soluzione
- 4 esercizi da svolgere in autonomia (durante o dopo il laboratorio)
- 2 prove d'esame dell'anno scorso
</script></section><section  data-markdown><script type="text/template">
## Modalità di svolgimento esercizi svolti

- leggeremo prima il testo insieme
- verrà lasciato un certo tempo per riflettere sull'impostazione
- verrà data la soluzione dopo 10 minuti discutendola
</script></section><section  data-markdown><script type="text/template">

# ESERCIZI
</script></section><section  data-markdown><script type="text/template">
## Materiale sempre disponibile su

-  https://webeep.polimi.it/mod/folder/view.php?id=195745
- queste <!-- .element: class="fragment" --> slide in formato interattivo si trovano su  *github*, all'indirizzo https://localhost.it/lez04_05/ 
- gli <!-- .element: class="fragment" --> esercizi di questo laboratorio si trovano su *webeep*
- le  <!-- .element: class="fragment" -->  soluzioni saranno disponibili su *webeep* 
</script></section><section  data-markdown><script type="text/template">Avete scaricato il testo dei 7 esercizi da webeep?

- scaricate e procediamo  
- https://webeep.polimi.it/mod/folder/view.php?id=195745 
</script></section><section  data-markdown><script type="text/template">
### Riprendiamo l'esercizio 2, secondo appello 2017-2018 (5 punti)

![es-es2-2app-1718](es-es2-2app-1718.png)
</script></section><section  data-markdown><script type="text/template">### stampa es. 2, secondo appello 2017-2018 (5 punti)


![es-es2-2app-1718-sol.png](es-es2-2app-1718-sol.png)
</script></section><section  data-markdown><script type="text/template">
### Stringa in C

- una **stringa** C non è altro che un **array di caratteri**
- quindi un puntatore a una stringa è un puntatore a un array di caratteri. 
- e un puntatore a un array è lo stesso di un puntatore al suo primo elemento.
</script></section><section  data-markdown><script type="text/template">
### Stringhe e array

```c[]
char c = 'X';
char a[] = "Politecnico"; // equivalente a char *a = "Politecnico"

 
char *ptr1 = &c;     // *ptr1 == 'X' // ptr1[0] == 'X'
 
char *ptr2 = a;      // *ptr2 == 'P' // ptr2[0] == 'P' // ptr2[4] == 't'
 
char *ptr3 = &a[0];  // *ptr3 == ‘P’
 
char *ptr4 = &a[6];  // *ptr4 == ‘c’ // ptr4[0] == ‘c’ // ptr4[4] == ‘o’ 
 
char *ptr5 = a + 6;  // ptr5[0] == 'c' == ptr3[6] // *(ptr5+0) == *(ptr3+6)

```
</script></section><section  data-markdown><script type="text/template">
### calcoli nell'esercizio

- E' sufficiente conoscere i valori relativi, non quelli assoluti per il calcolo corretto (ovvero il carattere 'b' dista 1 dal carattere 'a').

Ad esempio:

	char * t1 ;
	t1 = "abcd";
	printf("%d\n", t1[1]-'a'); // stampa il numero 1
</script></section><section  data-markdown><script type="text/template">
### Malloc e generazione di una stringa casuale
```c[|2-4|8|11-12|9,14,15|17-21|23-24|25|27-28]
/* generazione di una stringa casuale */
#include <stdio.h>      /* printf, scanf, NULL */
#include <stdlib.h>     /* malloc, free, rand */
#include <time.h>

int main ()
{
  int i,n;
  char * buffer;

  printf ("Lunghezza della stringa? ");
  scanf ("%d", &i);

  buffer = (char*) malloc (i+1);
  if (buffer==NULL) exit (1);

/** occhio!! */

  srand(time(NULL));

/* occhio!! */

  for (n=0; n<i; n++)
    buffer[n]=rand()%26+'a';
  buffer[i]='\0';

  printf ("Stringa RANDOM: %s\n",buffer);
  free (buffer);

  return 0;
}

```</script></section><section  data-markdown><script type="text/template">
## Provare a compilare togliendo <code>srand()</code>

https://localhost.it/lez03_05/#/29
</script></section><section  data-markdown><script type="text/template">
<section data-background-iframe="https://localhost.it/lez04_05/cast.html"
          data-background-interactive>
<div style="position: absolute; width: 20%; right: 0; box-shadow: 0 1px 4px rgba(0,0,0,0.5), 0 5px 25px rgba(0,0,0,0.2); background-color: rgba(0, 0, 0, 0.9); color: #fff; padding: 20px; font-size: 20px; text-align: left;">
						<h2>live DEBUG esercizio 2, II appello 17-18 </h2>
						</div>
 </section>
</script></section><section  data-markdown><script type="text/template">
### Esercizi svolti laboratorio 4
</script></section><section  data-markdown><script type="text/template">
### Chiamata *creativa* a una funzione es.2

![es2](es2.png)
</script></section><section  data-markdown><script type="text/template">
### Chiamata *creativa* a una funzione es.2

```c[|6-9|13|18|20-21|13|23-24|26-27|29-36|38|44-49|51-56|52-55|58|60|63-64|66|68-73|75|77|80-81|87-92|88-91|94|96]
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <time.h>

/*dichiarazioni funzioni */
int genera_matrice(int mat[2][2], int *somma_elementi);
int genera_matrice2(int mat[2][2], int *determinante);
void genera_matrice3(int mat[2][2], int *determinante, int *somma_elementi);

int main() {

  int mat[2][2], determinante, somma_elementi, i, j;

  //"Es4.2 - Generazione e analisi di una matrice quadrata 2 x 2.\n";
  printf("Es4.2 - Generazione e analisi di una matrice quadrata 2 x 2.\n");

  srand(time(NULL));

  //soluzione 1
  determinante = genera_matrice(mat, & somma_elementi);

  //soluzione 2
  //somma_elementi = genera_matrice2(mat, &determinante);

  //soluzione 3
  //genera_matrice3(mat, &determinante, &somma_elementi);

  printf("Matrice 2 x 2:\n");

  for (i = 0; i < 2; i++) {
    for (j = 0; j < 2; j++) {
      printf("%2d", mat[i][j]);
    }
    printf("\n");
  }

  printf("Determinante = %d\nSomma elementi = %d\n", determinante, somma_elementi);

  return 0;

}

//soluzione 1: ritorna il determinante e riceve come parametro l'indirizzo della variabile somma
int genera_matrice(int mat[2][2], int * somma_elementi) {

  int i, j, determinante;

  * somma_elementi = 0;

  for (i = 0; i < 2; i++) {
    for (j = 0; j < 2; j++) {
      mat[i][j] = rand() % 10;
      * somma_elementi = * somma_elementi + mat[i][j];
    }
  }

  determinante = mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];

  return determinante;
}

//soluzione 2: ritorna la somma e riceve il determinante per indirizzo
int genera_matrice2(int mat[2][2], int * determinante) {

  int i, j, somma_elementi = 0;

  for (i = 0; i < 2; i++) {
    for (j = 0; j < 2; j++) {
      mat[i][j] = rand() % 10;
      somma_elementi = somma_elementi + mat[i][j];
    }
  }

  * determinante = mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];

  return somma_elementi;
}

//soluzione 3: riceve sia il determinante che la somma per indirizzo
void genera_matrice3(int mat[2][2], int * determinante, int * somma_elementi) {

  int i, j;

  * somma_elementi = 0;

  for (i = 0; i < 2; i++) {
    for (j = 0; j < 2; j++) {
      mat[i][j] = rand() % 10;
      * somma_elementi = * somma_elementi + mat[i][j];
    }
  }

  * determinante = mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];

}

```


</script></section><section  data-markdown><script type="text/template">
### Esercizio 3 *1/3*

![es3](es3.png)
</script></section><section  data-markdown><script type="text/template">
### Esercizio 3 *2/3*
![es3a](es3a.png)
</script></section><section  data-markdown><script type="text/template">
### Esercizio 3 *3/3*

![es3b](es3b.png)
</script></section><section  data-markdown><script type="text/template">
### Esercizio 3 soluzione

```c[|1-3|5-9|11-15|17-18|20|22-24|26-28|30-32|34-35|37-38|40-42|47|49|51-53|61-69|71-76|78-80|82-87|89-92|93-96|98|100-102|103-109|111-122|124-131|133-142|142|143-152|154-162|167-168|170-177|178-180|182-186|188|190-194|195-199|201-210|212-221|]
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int anno;
    int mese;
    int giorno;
} s_data;

#define TXTL 20
typedef struct {
    s_data data;
    char meteo[TXTL];
} s_bollettino;

//                GEN FEB MAR APR MAG GIU LUG AGO SET OTT NOV DIC
int gg_mese[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

//Prototipi - Dichiarazioni

//riceve come parametro un anno
//ritorna 1 se l'anno è bisestile, 0 altrimenti
int anno_bisestile(int anno);

//riceve come parametro una data
//ritorna 1 se la data è corretta, 0 altrimenti.
int verifica_data(s_data data);

//riceve come parametri una data (che si suppone essere valida)
//ritorna il numero di giorni trascorsi dal 1 gennaio dell'anno indicato.
int giorni_da_capodanno(s_data data);

//chiede all'utente un bollettino
void ins_bollettino(s_bollettino *bollettino);

//stampa a video il bollettino ricevuto come parametro indicando anche quanti giorni siano trascorsi dall'inizio dell'anno
void stampa_bollettino(s_bollettino bollettino);

int main() {

    s_bollettino bollettino;

	//"Es4.3 - Bollettino Meteo con verifica della data e dell'anno bisestile.\n"
    printf("Es4.3 - Bollettino Meteo con verifica della data e dell'anno bisestile.\n");
    
	ins_bollettino(&bollettino);

	stampa_bollettino(bollettino);
    
    return 0;
    
}

//riceve come parametro un anno
//ritorna 1 se l'anno è bisestile, 0 altrimenti
int anno_bisestile(int anno) {
    return anno % 4 == 0 && (anno % 100 != 0 || anno % 400 == 0); 
}

//riceve come parametro una data
//ritorna 1 se la data è corretta, 0 altrimenti.
int verifica_data(s_data data) {

	int valida = 1, test;

	//anno >= 2000
	test = data.anno >= 2000;
	valida = valida && test;
	
	if (test) {
        printf("Anno %d corretto.\n", data.anno);
    }
    else {
        printf("Anno %d NON corretto.\n", data.anno);
    }
	
	//mese 1-12
	test = data.mese >= 1 && data.mese <= 12;
    valida = valida && test;
    
	if (test) {
        printf("Mese %d corretto.\n", data.mese);
    }
    else {
        printf("Mese %d NON corretto.\n", data.mese);
    }

	//caso febbraio di anno bisestile
	if (data.mese == 2 && anno_bisestile(data.anno) ) {
		test = data.giorno >= 1 && data.giorno <= 29;
	}
	//giorno 1..gg_mese
	else {
		test = data.giorno >= 1 && data.giorno <= gg_mese[data.mese - 1];
	}
	
	valida = valida && test;
        
	if (test) {
        printf("Giorno %d corretto.\n", data.giorno);
    }
    else {
        printf("Giorno %d NON corretto.\n", data.giorno);
    }
        
	return valida;

}

//ritorna il numero di giorni trascorsi dal 1 gennaio dell'anno indicato.
int giorni_da_capodanno(s_data data) {
	
	int i, somma_gg;
	
	//giorni del mese "corrente"
	somma_gg = data.giorno;
	
	//giorni dei mesi precedenti
    for (i = 0; i < data.mese - 1; i++) {
        somma_gg = somma_gg + gg_mese[i];
    }

	//correzione se anno bisestile e data oltre febbraio
	if (anno_bisestile(data.anno) && data.mese > 2) {
		somma_gg = somma_gg + 1;
	}

	return somma_gg;

}

//chiede all'utente i dati del bollettino, verificando che la data sia valida
void ins_bollettino(s_bollettino *bollettino) {
	
	int valida;

	printf("Inserimento dei dati di un bollettino Meteo\n");

	//meteo
	printf("Meteo? ");
	fflush(stdin);
/*
The C library function char *gets(char *str) reads a line from stdin and stores it into the string pointed to by str. It stops when either the newline character is read or when the end-of-file is reached, whichever comes first.

warning: the `gets' function is dangerous and should not be used.

gets remained an official part of the language up to the 1999 ISO C standard, but it was officially removed in the 2011 standard. Most C implementations still support it, but at least gcc issues a warning for any code that uses it.

*/

    gets(bollettino -> meteo);

	 /*rimane \n alla fine della stringa a differenza di gets */
        //fgets (bollettino->meteo, sizeof(bollettino->meteo),stdin);

	/*alternativa */
        //fgets ((*bollettino).meteo, sizeof((*bollettino).meteo),stdin);

        /* così viene sostituito il carattere \n con un termine di stringa */ 
       if (fgets(bollettino->meteo, sizeof(bollettino->meteo),stdin) != 0)
         bollettino->meteo[strcspn(bollettino->meteo, "\n")] = '\0';

	
	do {
		
		//anno
	    printf("Anno? ");
	
		//NB: 
		//l'operatore "." ha precedenza maggiore di "*", quindi occorrono le parentesi per dare precedenza a "*"
		//	(*bollettino).data.anno
	    //Alternativamente si puo' usare l'operatore "->" al posto di "*" cosi' non servono le parentesi
		//	bollettino -> data.anno 
	    //L'operatore "->" ha precedenza maggiore di "&" quindi non servono le parentesi
	    //	&bollettino -> data.anno	equivale a	&(bollettino -> data.anno)	 
		scanf("%d", &(bollettino -> data.anno) );
	    //altro modo:	scanf("%d", &bollettino -> data.anno );
	    //altro modo:   scanf("%d", &(*bollettino).data.anno);
	    //altro modo:	scanf("%d", &( (*bollettino).data.anno ) );
	
	    printf("Mese? ");
	    scanf("%d", &bollettino -> data.mese);
	
		printf("Giorno? ");
	    scanf("%d", &bollettino -> data.giorno);
	
    	valida = verifica_data(bollettino -> data);
    	
    	if (!valida) {
    		printf("Data non valida!\n");
		}
		
		fflush(stdin);

	}
	while (!valida);
	
}

//stampa a video il bollettino ricevuto come parametro indicando anche quanti giorni siano trascorsi dall'inizio dell'anno
void stampa_bollettino(s_bollettino bollettino) {
	
	int somma_gg;

    printf("Bollettino Meteo %2d/%2d/%d: %s.\n", bollettino.data.giorno, bollettino.data.mese, bollettino.data.anno, bollettino.meteo);

	if ( anno_bisestile(bollettino.data.anno) ) {
		printf("L'anno %d e' bisestile.\n", bollettino.data.anno);
	}
	
	somma_gg = giorni_da_capodanno(bollettino.data);

    if (somma_gg == 1) {
        printf("E' il primo giorno dell'anno!\n");
    }
    else {
        printf("Sono trascorsi %d giorni dall'inizio dell'anno.\n", somma_gg);
    }

}

```
</script></section><section  data-markdown><script type="text/template">
### Perché gets() è pericoloso?

- Il Virus su Internet (*Morris Internet Worm*) (2 novembre 1998) utilizzava gets() e un buffer overflow per propagarsi da un sistema all'altro. La funzione non sa quanto è grande il buffer, quindi continua a leggere finché non trova una nuova riga o incontra EOF, e potrebbe superare i limiti assegnati.

- Lo standard C11 ISO/IEC 9899:2011 ha eliminato gets() come funzione standard, 

- rimarrà nelle librerie per molti anni (che significa "decenni") per motivi di retrocompatibilità. 
</script></section><section  data-markdown><script type="text/template">
### Esercizio 7 *1/3*

![es7a](es7a.png)
</script></section><section  data-markdown><script type="text/template">
### Esercizio 7 *2/3*
![es7b](es7b.png)
</script></section><section  data-markdown><script type="text/template">
### Esercizio 7 *3/3*

![es7c](es7c.png)
</script></section><section  data-markdown><script type="text/template">
Esercizio 7 (soluzione)

```c[|1-3|5-8|11-15|17-32|33|35-36|38-39|41|43-46|48-50|52-54|55-63|64-70|72-76|78-82|84-91|93-94|97-101|103-111|113-115|113|118-149|151-163|165-166|168-173|175-201|203-219|]
#define DIM_MARE 5
#define N_NAVI 5
#define EN_MAX 5

#include <stddef.h>
#include <stdio.h>      /* printf, scanf, NULL */
#include <stdlib.h>     /* malloc, free, rand */
#include <time.h>


typedef struct {
  int r; //indice di riga da 0 a DIM_MARE - 1
  int c; //indice di colonna da 0 a DIM_MARE - 1
  int energia; //energia da 0 a EN_MAX
} s_nave;

//riempie casualmente il mare e la flotta
//ritorna 1 se tutto ok, 0 altrimenti
int setup(int mare[DIM_MARE][DIM_MARE], s_nave flotta[N_NAVI]);

//stampa la situazione del mare
void stampa_mare(int mare[DIM_MARE][DIM_MARE]);

//stampa la flotta
void stampa_flotta(s_nave flotta[N_NAVI]);

//"spara una cannonata"
void fuoco(int mare[DIM_MARE][DIM_MARE], s_nave flotta[N_NAVI]);

//ritorna 1 se tutte le navi sono affondate
int gameover(s_nave flotta[N_NAVI]);

int main() {

  s_nave flotta[N_NAVI];
  int mare[DIM_MARE][DIM_MARE], fine, colpi;

  //"Es4.7 - Simulazione della battaglia navale con N_NAVI navi (energia max EN_MAX) su un mare DIM_MARE x DIM_MARE.\n"
  printf("4.7 - Simulazione della battaglia navale con %d navi (energia max %d) su un mare %d x %d.\n", N_NAVI, EN_MAX, DIM_MARE, DIM_MARE);

  srand(time(NULL));

  //setup
  if (!setup(mare, flotta)) {
    return -1;
  }

  //stampa
  stampa_mare(mare);
  stampa_flotta(flotta);

  //gioca
  colpi = 0;
  printf("Partita:\n");
  do {

    colpi++;

    fuoco(mare, flotta);

    fine = gameover(flotta);

  }
  while (!fine);

  printf("Tutte le navi sono state affondate dopo %d colp%c!\n", colpi, colpi == 1 ? 'o' : 'i');

  return 0;

}

//riempie casualmente il mare e la flotta
//ritorna 1 se tutto ok, 0 altrimenti
int setup(int mare[DIM_MARE][DIM_MARE], s_nave flotta[N_NAVI]) {

  int i, j, r, c;

  //controllo dimensioni
  if (N_NAVI > DIM_MARE * DIM_MARE) {
    printf("Attenzione, gioco non possibile perche' ci sono troppe navi in rapporto alle dimensioni del mare!\n");
    return 0;
  }

  //inizializza il mare (-1 indica l'assenza di navi)
  for (i = 0; i < DIM_MARE; i++) {

    for (j = 0; j < DIM_MARE; j++) {
      mare[i][j] = -1;
    }

  }

  //inizializzazione delle N_NAVI navi
  for (i = 0; i < N_NAVI; i++) {

    //scegli a caso una posizione di mare libera
    do {
      r = rand() % DIM_MARE;
      c = rand() % DIM_MARE;
    }
    while (mare[r][c] != -1);

    //posiziona la nave
    flotta[i].r = r;
    flotta[i].c = c;
    mare[r][c] = i;

    //imposta energia iniziale
    flotta[i].energia = rand() % EN_MAX + 1;

  }

  return 1;

}

//stampa la situazione del mare
void stampa_mare(int mare[DIM_MARE][DIM_MARE]) {

  int i, j;

  //stampa del mare
  printf("Mare:\n");

  printf("    ");
  for (i = 0; i < DIM_MARE; i++) {
    printf("%3d", i);
  }
  printf("\n");

  printf("----");
  for (i = 0; i < DIM_MARE; i++) {
    printf("---");
  }
  printf("\n");

  for (i = 0; i < DIM_MARE; i++) {

    printf("%3d", i);
    printf("|");
    for (j = 0; j < DIM_MARE; j++) {
      printf("%3d", mare[i][j]);
    }
    printf("\n");

  }
  printf("\n");

}

//stampa la flotta
void stampa_flotta(s_nave flotta[N_NAVI]) {

  int i;

  //stampa della flotta
  printf("Flotta:\n");
  for (i = 0; i < N_NAVI; i++) {
    printf("Nave %d in (%d, %d). Energia = %d.\n", i, flotta[i].r, flotta[i].c, flotta[i].energia);
  }
  printf("\n");

}

//"spara una cannonata"
void fuoco(int mare[DIM_MARE][DIM_MARE], s_nave flotta[N_NAVI]) {

  int r, c;

  //scelta casuale delle coordinate di fuoco
  r = rand() % DIM_MARE;
  c = rand() % DIM_MARE;
  printf("Fuoco coordinate (%d, %d): ", r, c);

  //acqua
  if (mare[r][c] == -1) {
    printf("Acqua!\n");
  }
  //colpita
  else {

    //nave gia' affondata
    if (flotta[mare[r][c]].energia == 0) {
      printf("Nave %d gia' affondata...\n", mare[r][c]);
    }
    //nave con ancora energia
    else {

      flotta[mare[r][c]].energia--;

      if (flotta[mare[r][c]].energia == 0) {
        printf("Nave %d colpita e affondata!\n", mare[r][c]);
      } else {
        printf("Nave %d colpita! Energia rimanente = %d.\n", mare[r][c], flotta[mare[r][c]].energia);
      }

    }

  }

}

//ritorna 1 se tutte le navi sono affondate
int gameover(s_nave flotta[N_NAVI]) {

  //verifica se il gioco e' terminato
  int i, fine = 1;
  for (i = 0; i < N_NAVI && fine; i++) {

    //se c'e' una nave con energia > 0 il gioco deve continuare
    if (flotta[i].energia > 0) {
      fine = 0;
    }

  }

  return fine;

}

```
</script></section><section  data-markdown><script type="text/template">
### Ora potete proseguire da soli

- circa mezzora prima del termine discuteremo un esercizio o due di prova d'esame
- Faremo il punto su dove siete arrivati
- Domande sono **incoraggiatissime!**

 </script></section><section  data-markdown><script type="text/template">
### Esercizio di esame 10 punti

es2 3° appello 2012-2013 (6 settembre 2013)

![es2-3appello1213](es2-3appello1213.png)

10 punti, 3 esercizi, durata prova 90 minuti</script></section><section  data-markdown><script type="text/template">
### Esercizio di esame 10 punti

es2 3° appello 2012-2013

```c[|3-5|7-15|17-18|61-62|20-21|23-36|47|52|54-62|65-74|]
#include <stdio.h>

/*per fare i test evito una matrice di 20 righe e 10 colonne... :) */
#define ROWS 2
#define COLS 5

//funzione non richiesta
void stampa(int mat[][COLS]) {
  int i, j;
  printf("\nLa matrice inserita è la seguente: \n\n");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) printf("%d ", mat[i][j]);
    printf("\n");
  }
}

int INS(int mat[ROWS][COLS]) {
  int i, j, num, x, y, duplicato, somma, somma_min, j_min;
  printf("\f\nInserimento dati nella matrice\n");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) //per ogni elemento della matrice
      //ciclo di verifica dell’univocità
      do {
        printf("[%d, %d]: ", i, j);
        scanf("%d", & num);
        duplicato = 0;
        for (x = 0; x <= i && !duplicato; x++)
          for (y = 0;
            (x != i || y < j) && y < COLS && !duplicato; y++)
            if (mat[x][y] == num) duplicato = 1;
        if (!duplicato) 
		mat[i][j] = num;
        else 
		printf("Numero %d non valido... inserirne un altro\n", num);
      }
  while (duplicato == 1);
} //fine primo for

/* il controllo deve avvenire su tutti gli elementi delle righe precedenti
quella nella quale stiamo caricando il dato e per quella corrente ci si deve
invece fermare all’elemento precedente a quello corrente. La condizione di
controllo dei due for risolve questo problema. Tuttavia è accettabile anche una
soluzione che scandisce completamente, con un doppio for, le righe precedenti
alla riga corrente e infine un for che scandisce la parte necessaria della riga
corrente*/

stampa(mat); //non richiesta
/*calcolo la somma della prima colonna e inizializzo il minimo di riferimento.
Inizializzare la somma minima ad un valore come zero è critico perché le somme
potrebbero essere tutte di valore superiore a zero. */

somma_min = 0;

for (i = 0; i < ROWS; i++) somma_min = somma_min + mat[i][0];
	j_min=0;
for (j = 1; j < COLS; j++) {
	somma = 0;
	for (i = 0; i < ROWS; i++) somma = somma + mat[i][j];
	  if ( somma_min > somma) { j_min = j; somma_min = somma;}
}
return j_min;
} //fine INS

//non richiesta
int main() {

int mat[ROWS][COLS]; 

//chiamo la funzione creata
int col=INS(mat);

printf("\nLa colonna con somma minima è la %d\n\n\n",col+1);
    
}


```
</script></section><section  data-markdown><script type="text/template">### Esercizio di esame 13 punti

es1 3° appello 2012-2013 (6 settembre 2013)

![es1-3appello1213](es1-3appello1213.png)

13 punti, 3 esercizi, durata prova 90 minuti</script></section><section  data-markdown><script type="text/template">
### Esercizio di esame 13 punti

es1 3° appello 2012-2013

```c[]
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct elem
{
	char str[20];
	struct elem * next;
};

//funzione non richiesta dall'esercizio - vedi main

struct elem* instesta(struct elem *l, char txt[21])
{

	struct elem * tmp;

	tmp = (struct elem *) malloc(sizeof(struct elem));

	if (tmp == NULL)
	{
		printf("Memoria esaurita\n");
		return l;
	}

	tmp->next = l;
	strcpy(tmp->str, txt);
	return tmp;

}

//funzione non richiesta dall'esercizio

void stampa(struct elem *l)
{
	printf("\n");
	while (l != NULL)
	{
		printf("|%s| -> ", l->str);
		l = l->next;
	}

	printf("NULL\n");

}

struct elem* Sposta(struct elem *l, int *spostati)
{

	char TEST[21], c;
	int i, fine;

	struct elem *ultimo = NULL, *tmp = NULL, *coda = NULL, *prec = NULL;

	//se NULL o un solo elemento non si deve spostare nulla *spostati = 0;

	if (l == NULL || l->next == NULL)
	{
		printf("Lista identica");
		return l;
	}

	//caricamento stringa

	fine = 0;
	i = 0;

	do {
		printf("Carattere (invio per terminare): ");
		
		scanf("%c", &c);

		if (c != '\n')
		{
			TEST[i] = c;
			i++;
			scanf("%c", &c); //questo scanf intercetta il \n
		}
		else fine = 1;
	}

	while (i < 21 && !fine);

	TEST[i] = '\0';

	//Ricerca e spostamento

	/*posizionamento sull'ultimo elemento della lista iniziale per determinare dove

	fermare la scansione. Alternative: contare gli elementi esistenti o gli elementi

	esistenti con stringa uguale a quella di test.*/

	ultimo = l;

	while (ultimo->next != NULL)
	{
		ultimo = ultimo->next;
	}

	/*coda indica l'ultimo elemento della lista durante l'elaborazione; all'inizio

	la coda coincide con l'ultimo elemento, ma poi puntera' all'ultimo spostato*/

	coda = ultimo;

	/*tmp serve per scandire la coda dal primo elemento sino al penultimo della

	lista originale. L'ultimo non e' considerato perche' comunque non cambierebbe

	posizione; nessun problema se considerato*/

	tmp = l;

	while (tmp != ultimo)

	{
		if (strcmp(tmp->str, TEST) == 0)

		{

			//elemento intercettato viene spostato logicamente in coda

			coda->next = tmp;

			coda = coda->next;	//tmp diventa il nuovo ultimo

			//tmp passa al prossimo. Precedente rimane fermo.

			tmp = tmp->next;

			/*l'elemento individuato va eliminato dalla precedente posizione nella lista. Si

			hanno due casi: l'elemento e' il primo della lista e quindi va

			cambiata la testa di lista oppure e' in mezzo e quindi il precedente che puntava

			a lui deve ora puntare al prossimo di quello che ha fatto match (attualmente puntato da

			tmp)*/

			if (prec == NULL) l = l->next;	//prec rimane NULL

			else prec->next = tmp;	//prec rimane sull'elemento corrente

			//sistemazione campo next dell'elemento spostato in coda

			coda->next = NULL;
			(*spostati) ++;
		}	//fine spostamento

		else	//se elemento non e' quello cercato passa al prossimo

		{

			prec = tmp;
			tmp = tmp->next;
		}
	}	//end while

	return l;

}

//funzione non richiesta

int main()
{

	struct elem *LIST = NULL;
	int spostati = 0;

    //inserisco nella lista 3 rossi 2 verdi 1 giallo
    
	LIST = instesta(LIST, "rosso"); // questo finisce in coda, se la stringa e' TEST[21]=="rosso" ho 2 spostamenti
	LIST = instesta(LIST, "verde");
	LIST = instesta(LIST, "rosso");
	LIST = instesta(LIST, "giallo");
    LIST = instesta(LIST, "verde");
	LIST = instesta(LIST, "rosso");
	
	LIST = Sposta(LIST, &spostati);
	stampa(LIST);

	printf("\nSpostamenti (match): %d\n\n",
		spostati);

}
```
</script></section>
<section  data-markdown><script type="text/template">

  <p class="fragment fade-in-then-out">The END</p>
  </script></section></div>
    </div>

    <script src="./dist/reveal.js"></script>

    <script src="./plugin/markdown/markdown.js"></script>
    <script src="./plugin/highlight/highlight.js"></script>
    <script src="./plugin/zoom/zoom.js"></script>
    <script src="./plugin/notes/notes.js"></script>
    <script src="./plugin/math/math.js"></script>
    <script>
      function extend() {
        var target = {};
        for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (source.hasOwnProperty(key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }

      // default options to init reveal.js
      var defaultOptions = {
        controls: true,
        progress: true,
        history: true,
        center: true,
        transition: 'default', // none/fade/slide/convex/concave/zoom
        plugins: [
          RevealMarkdown,
          RevealHighlight,
          RevealZoom,
          RevealNotes,
          RevealMath
        ]
      };

      // options from URL query string
      var queryOptions = Reveal().getQueryHash() || {};

      var options = extend(defaultOptions, {"transition":"fade,","slideNumber":"c/t,"}, queryOptions);
    </script>


    <script>
      Reveal.initialize(options);
    </script>
  </body>
</html>
